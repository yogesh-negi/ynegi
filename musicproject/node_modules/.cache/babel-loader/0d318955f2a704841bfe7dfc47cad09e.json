{"ast":null,"code":"/*!\n * method-override\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('method-override');\n\nvar methods = require('methods');\n\nvar parseurl = require('parseurl');\n\nvar querystring = require('querystring');\n\nvar vary = require('vary');\n/**\n * Method Override:\n *\n * Provides faux HTTP method support.\n *\n * Pass an optional `getter` to use when checking for\n * a method override.\n *\n * A string is converted to a getter that will look for\n * the method in `req.body[getter]` and a function will be\n * called with `req` and expects the method to be returned.\n * If the string starts with `X-` then it will look in\n * `req.headers[getter]` instead.\n *\n * The original method is available via `req.originalMethod`.\n *\n * @param {string|function} [getter=X-HTTP-Method-Override]\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\n\nmodule.exports = function methodOverride(getter, options) {\n  var opts = options || {}; // get the getter fn\n\n  var get = typeof getter === 'function' ? getter : createGetter(getter || 'X-HTTP-Method-Override'); // get allowed request methods to examine\n\n  var methods = opts.methods === undefined ? ['POST'] : opts.methods;\n  return function methodOverride(req, res, next) {\n    var method;\n    var val;\n    req.originalMethod = req.originalMethod || req.method; // validate request is an allowed method\n\n    if (methods && methods.indexOf(req.originalMethod) === -1) {\n      return next();\n    }\n\n    val = get(req, res);\n    method = Array.isArray(val) ? val[0] : val; // replace\n\n    if (method !== undefined && supports(method)) {\n      req.method = method.toUpperCase();\n      debug('override %s as %s', req.originalMethod, req.method);\n    }\n\n    next();\n  };\n};\n/**\n * Create a getter for the given string.\n */\n\n\nfunction createGetter(str) {\n  if (str.substr(0, 2).toUpperCase() === 'X-') {\n    // header getter\n    return createHeaderGetter(str);\n  }\n\n  return createQueryGetter(str);\n}\n/**\n * Create a getter for the given query key name.\n */\n\n\nfunction createQueryGetter(key) {\n  return function (req, res) {\n    var url = parseurl(req);\n    var query = querystring.parse(url.query || '');\n    return query[key];\n  };\n}\n/**\n * Create a getter for the given header name.\n */\n\n\nfunction createHeaderGetter(str) {\n  var name = str.toLowerCase();\n  return function (req, res) {\n    // set appropriate Vary header\n    vary(res, str); // get header\n\n    var header = req.headers[name];\n\n    if (!header) {\n      return undefined;\n    } // multiple headers get joined with comma by node.js core\n\n\n    var index = header.indexOf(','); // return first value\n\n    return index !== -1 ? header.substr(0, index).trim() : header.trim();\n  };\n}\n/**\n * Check if node supports `method`.\n */\n\n\nfunction supports(method) {\n  return method && typeof method === 'string' && methods.indexOf(method.toLowerCase()) !== -1;\n}","map":{"version":3,"sources":["C:/Users/Yogesh/Desktop/musicplayer/musicapp/musicproject/src/api/node_modules/method-override/index.js"],"names":["debug","require","methods","parseurl","querystring","vary","module","exports","methodOverride","getter","options","opts","get","createGetter","undefined","req","res","next","method","val","originalMethod","indexOf","Array","isArray","supports","toUpperCase","str","substr","createHeaderGetter","createQueryGetter","key","url","query","parse","name","toLowerCase","header","headers","index","trim"],"mappings":"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","sourcesContent":["/*!\n * method-override\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('method-override')\nvar methods = require('methods')\nvar parseurl = require('parseurl')\nvar querystring = require('querystring')\nvar vary = require('vary')\n\n/**\n * Method Override:\n *\n * Provides faux HTTP method support.\n *\n * Pass an optional `getter` to use when checking for\n * a method override.\n *\n * A string is converted to a getter that will look for\n * the method in `req.body[getter]` and a function will be\n * called with `req` and expects the method to be returned.\n * If the string starts with `X-` then it will look in\n * `req.headers[getter]` instead.\n *\n * The original method is available via `req.originalMethod`.\n *\n * @param {string|function} [getter=X-HTTP-Method-Override]\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nmodule.exports = function methodOverride (getter, options) {\n  var opts = options || {}\n\n  // get the getter fn\n  var get = typeof getter === 'function'\n    ? getter\n    : createGetter(getter || 'X-HTTP-Method-Override')\n\n  // get allowed request methods to examine\n  var methods = opts.methods === undefined\n    ? ['POST']\n    : opts.methods\n\n  return function methodOverride (req, res, next) {\n    var method\n    var val\n\n    req.originalMethod = req.originalMethod || req.method\n\n    // validate request is an allowed method\n    if (methods && methods.indexOf(req.originalMethod) === -1) {\n      return next()\n    }\n\n    val = get(req, res)\n    method = Array.isArray(val)\n      ? val[0]\n      : val\n\n    // replace\n    if (method !== undefined && supports(method)) {\n      req.method = method.toUpperCase()\n      debug('override %s as %s', req.originalMethod, req.method)\n    }\n\n    next()\n  }\n}\n\n/**\n * Create a getter for the given string.\n */\n\nfunction createGetter (str) {\n  if (str.substr(0, 2).toUpperCase() === 'X-') {\n    // header getter\n    return createHeaderGetter(str)\n  }\n\n  return createQueryGetter(str)\n}\n\n/**\n * Create a getter for the given query key name.\n */\n\nfunction createQueryGetter (key) {\n  return function (req, res) {\n    var url = parseurl(req)\n    var query = querystring.parse(url.query || '')\n    return query[key]\n  }\n}\n\n/**\n * Create a getter for the given header name.\n */\n\nfunction createHeaderGetter (str) {\n  var name = str.toLowerCase()\n\n  return function (req, res) {\n    // set appropriate Vary header\n    vary(res, str)\n\n    // get header\n    var header = req.headers[name]\n\n    if (!header) {\n      return undefined\n    }\n\n    // multiple headers get joined with comma by node.js core\n    var index = header.indexOf(',')\n\n    // return first value\n    return index !== -1\n      ? header.substr(0, index).trim()\n      : header.trim()\n  }\n}\n\n/**\n * Check if node supports `method`.\n */\n\nfunction supports (method) {\n  return method &&\n    typeof method === 'string' &&\n    methods.indexOf(method.toLowerCase()) !== -1\n}\n"]},"metadata":{},"sourceType":"module"}