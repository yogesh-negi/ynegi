{"ast":null,"code":"// gridfs-stream\n\n/**\n * Module dependencies.\n */\nvar GridWriteStream = require('./writestream');\n\nvar GridReadStream = require('./readstream');\n/**\n * Grid constructor\n *\n * @param {mongo.Db} db - an open mongo.Db instance\n * @param {mongo} [mongo] - the native driver you are using\n */\n\n\nfunction Grid(db, mongo) {\n  if (!(this instanceof Grid)) {\n    return new Grid(db, mongo);\n  }\n\n  mongo || (mongo = Grid.mongo ? Grid.mongo : undefined);\n  if (!mongo) throw new Error('missing mongo argument\\nnew Grid(db, mongo)');\n  if (!db) throw new Error('missing db argument\\nnew Grid(db, mongo)'); // the db must already be open b/c there is no `open` event emitted\n  // in old versions of the driver\n\n  this.db = db;\n  this.mongo = mongo;\n  this.curCol = this.mongo.GridStore ? this.mongo.GridStore.DEFAULT_ROOT_COLLECTION : 'fs';\n}\n/**\n * Creates a writable stream.\n *\n * @param {Object} [options]\n * @return Stream\n */\n\n\n_c = Grid;\n\nGrid.prototype.createWriteStream = function (options) {\n  return new GridWriteStream(this, options);\n};\n/**\n * Creates a readable stream. Pass at least a filename or _id option\n *\n * @param {Object} options\n * @return Stream\n */\n\n\nGrid.prototype.createReadStream = function (options) {\n  return new GridReadStream(this, options);\n};\n/**\n * The collection used to store file data in mongodb.\n * @return {Collection}\n */\n\n\nObject.defineProperty(Grid.prototype, 'files', {\n  get: function () {\n    if (this._col) return this._col;\n    return this.collection();\n  }\n});\n/**\n * Changes the default collection to `name` or to the default mongodb gridfs collection if not specified.\n *\n * @param {String|undefined} name root gridfs collection name\n * @return {Collection}\n */\n\nGrid.prototype.collection = function (name) {\n  this.curCol = name || this.curCol || this.mongo.GridStore.DEFAULT_ROOT_COLLECTION;\n  return this._col = this.db.collection(this.curCol + \".files\");\n};\n/**\n * Removes a file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\n\nGrid.prototype.remove = function (options, callback) {\n  var _id;\n\n  if (options._id) {\n    _id = this.tryParseObjectId(options._id) || options._id;\n  }\n\n  if (!_id) {\n    _id = options.filename;\n  }\n\n  return this.mongo.GridStore.unlink(this.db, _id, options, callback);\n};\n/**\n * Checks if a file exists by passing a filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\n\nGrid.prototype.exist = function (options, callback) {\n  var _id;\n\n  if (options._id) {\n    _id = this.tryParseObjectId(options._id) || options._id;\n  }\n\n  if (!_id) {\n    _id = options.filename;\n  }\n\n  return this.mongo.GridStore.exist(this.db, _id, options.root, callback);\n};\n/**\n * Find file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\n\nGrid.prototype.findOne = function (options, callback) {\n  if ('function' != typeof callback) {\n    throw new Error('findOne requires a callback function');\n  }\n\n  var find = {};\n\n  for (var n in options) {\n    if (n != 'root') {\n      find[n] = options[n];\n    }\n  }\n\n  if (find._id) {\n    find._id = this.tryParseObjectId(find._id) || find._id;\n  }\n\n  var collection = options.root && options.root != this.curCol ? this.db.collection(options.root + \".files\") : this.files;\n\n  if (!collection) {\n    return callback(new Error('No collection specified'));\n  }\n\n  collection.find(find, function (err, cursor) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!cursor) {\n      return callback(new Error('Collection not found'));\n    }\n\n    cursor.nextObject(callback);\n  });\n};\n/**\n * Attemps to parse `string` into an ObjectId\n *\n * @param {GridReadStream} self\n * @param {String|ObjectId} string\n * @return {ObjectId|Boolean}\n */\n\n\nGrid.prototype.tryParseObjectId = function tryParseObjectId(string) {\n  try {\n    return new this.mongo.ObjectID(string);\n  } catch (_) {\n    return false;\n  }\n};\n/**\n * expose\n */\n\n\nmodule.exports = exports = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/Yogesh/Desktop/musicplayer/musicapp/musicproject/src/api/node_modules/gridfs-stream/lib/index.js"],"names":["GridWriteStream","require","GridReadStream","Grid","db","mongo","undefined","Error","curCol","GridStore","DEFAULT_ROOT_COLLECTION","prototype","createWriteStream","options","createReadStream","Object","defineProperty","get","_col","collection","name","remove","callback","_id","tryParseObjectId","filename","unlink","exist","root","findOne","find","n","files","err","cursor","nextObject","string","ObjectID","_","module","exports"],"mappings":"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","sourcesContent":["// gridfs-stream\n\n/**\n * Module dependencies.\n */\n\nvar GridWriteStream = require('./writestream')\nvar GridReadStream = require('./readstream')\n\n/**\n * Grid constructor\n *\n * @param {mongo.Db} db - an open mongo.Db instance\n * @param {mongo} [mongo] - the native driver you are using\n */\n\nfunction Grid (db, mongo) {\n  if (!(this instanceof Grid)) {\n    return new Grid(db, mongo);\n  }\n\n  mongo || (mongo = Grid.mongo ? Grid.mongo : undefined);\n\n  if (!mongo) throw new Error('missing mongo argument\\nnew Grid(db, mongo)');\n  if (!db) throw new Error('missing db argument\\nnew Grid(db, mongo)');\n\n  // the db must already be open b/c there is no `open` event emitted\n  // in old versions of the driver\n  this.db = db;\n  this.mongo = mongo;\n  this.curCol = this.mongo.GridStore ? this.mongo.GridStore.DEFAULT_ROOT_COLLECTION : 'fs';\n}\n\n/**\n * Creates a writable stream.\n *\n * @param {Object} [options]\n * @return Stream\n */\n\nGrid.prototype.createWriteStream = function (options) {\n  return new GridWriteStream(this, options);\n}\n\n/**\n * Creates a readable stream. Pass at least a filename or _id option\n *\n * @param {Object} options\n * @return Stream\n */\n\nGrid.prototype.createReadStream = function (options) {\n  return new GridReadStream(this, options);\n}\n\n/**\n * The collection used to store file data in mongodb.\n * @return {Collection}\n */\n\nObject.defineProperty(Grid.prototype, 'files', {\n  get: function () {\n    if (this._col) return this._col;\n    return this.collection();\n  }\n});\n\n/**\n * Changes the default collection to `name` or to the default mongodb gridfs collection if not specified.\n *\n * @param {String|undefined} name root gridfs collection name\n * @return {Collection}\n */\n\nGrid.prototype.collection = function (name) {\n  this.curCol = name || this.curCol || this.mongo.GridStore.DEFAULT_ROOT_COLLECTION;\n  return this._col = this.db.collection(this.curCol + \".files\");\n}\n\n/**\n * Removes a file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.remove = function (options, callback) {\n  var _id;\n  if (options._id) {\n    _id = this.tryParseObjectId(options._id) || options._id;\n  }\n  if (!_id) {\n    _id = options.filename;\n  }\n  return this.mongo.GridStore.unlink(this.db, _id, options, callback);\n}\n\n/**\n * Checks if a file exists by passing a filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.exist = function (options, callback) {\n    var _id;\n    if (options._id) {\n        _id = this.tryParseObjectId(options._id) || options._id;\n    }\n    if (!_id) {\n        _id = options.filename;\n    }\n    return this.mongo.GridStore.exist(this.db, _id, options.root, callback);\n}\n\n/**\n * Find file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.findOne = function (options, callback) {\n  if ('function' != typeof callback) {\n    throw new Error('findOne requires a callback function');\n  }\n  var find = {};\n  for (var n in options) {\n    if (n != 'root') {\n      find[n] = options[n];\n    }\n  }\n  if (find._id) {\n    find._id = this.tryParseObjectId(find._id) || find._id;\n  }\n  var collection = options.root  && options.root != this.curCol ? this.db.collection(options.root + \".files\") : this.files;\n  if (!collection) {\n    return callback(new Error('No collection specified'));\n  }\n  collection.find(find, function(err, cursor) {\n    if (err) { return callback(err); }\n    if (!cursor) { return callback(new Error('Collection not found')); }\n    cursor.nextObject(callback);\n  });\n}\n\n/**\n * Attemps to parse `string` into an ObjectId\n *\n * @param {GridReadStream} self\n * @param {String|ObjectId} string\n * @return {ObjectId|Boolean}\n */\n\nGrid.prototype.tryParseObjectId = function tryParseObjectId (string) {\n  try {\n    return new this.mongo.ObjectID(string);\n  } catch (_) {\n    return false;\n  }\n}\n\n/**\n * expose\n */\n\nmodule.exports = exports = Grid;\n"]},"metadata":{},"sourceType":"module"}