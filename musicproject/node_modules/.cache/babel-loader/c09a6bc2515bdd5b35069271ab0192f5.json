{"ast":null,"code":"/**\n *\n * Utility functions\n * @module multer-gridfs-storage/utils\n *\n */\nconst isPlainObject = require('lodash.isplainobject');\n/**\n * Compare two objects by value.\n *\n * This function is designed taking into account how mongodb connection parsing routines work.\n * @param {any} object1 The target object to compare\n * @param {any} object2 The second object to compare with the first\n * @return {boolean} Return true if both objects are equal by value\n */\n\n\nfunction compare(object1, object2) {\n  let prop;\n  let comp;\n  let value1;\n  let value2;\n  let keys1 = 0;\n  let keys2 = 0; // If objects are equal by identity stop testing\n\n  if (object1 === object2) {\n    return true;\n  } // Falsey and plain objects with no properties are equivalent\n\n\n  if (!object1 || !object2) {\n    if (!object1 && !object2) {\n      return true;\n    }\n\n    return !(object1 ? hasKeys(object1) : hasKeys(object2));\n  } // Check both own and inherited properties, MongoDb doesn't care where the property was defined\n\n  /* eslint-disable-next-line guard-for-in */\n\n\n  for (prop in object1) {\n    value1 = object1[prop];\n    value2 = object2[prop]; // If one object has one property not present in the other they are different\n\n    if (prop in object2) {\n      comp = compareBy(value1, value2);\n\n      switch (comp) {\n        case 'object':\n          // If both values are plain objects recursively compare its properties\n          if (!compare(value1, value2)) {\n            return false;\n          }\n\n          break;\n\n        case 'array':\n          // If both values are arrays compare buffers and strings by content and every other value by identity\n          if (!compareArrays(value1, value2)) {\n            return false;\n          }\n\n          break;\n\n        case 'buffer':\n          // If both values are buffers compare them by content\n          if (Buffer.compare(value1, value2) !== 0) {\n            return false;\n          }\n\n          break;\n\n        default:\n          // All other values are compared by identity\n          if (value1 !== value2) {\n            return false;\n          }\n\n          break;\n      }\n\n      keys1++;\n    } else {\n      return false;\n    }\n  } // Count all properties from the target object\n\n  /* eslint-disable-next-line guard-for-in */\n\n\n  for (prop in object2) {\n    keys2++;\n  } // If the target object has more properties than source they are different\n\n\n  return keys1 === keys2;\n}\n/**\n * Compare arrays by reference unless the values are strings or buffers\n * @param array1 The source array to compare\n * @param array2 The target array to compare with\n * @return {boolean} Returns true if both arrays are equivalent\n */\n\n\nfunction compareArrays(array1, array2) {\n  let value1;\n  let value2;\n  let i;\n\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  for (i = 0; i < array1.length; i++) {\n    value1 = array1[i];\n    value2 = array2[i]; // Types other than string or buffers are compared by reference because MongoDb only accepts those two types\n    // for configuration inside arrays\n\n    if (compareBy(value1, value2) === 'buffer') {\n      if (Buffer.compare(value1, value2) !== 0) {\n        return false;\n      }\n    } else if (value1 !== value2) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Indicates how objects should be compared.\n * @param object1 The source object to compare\n * @param object2 The target object to compare with\n * @return {string} Always returns 'identity' unless both objects have the same type and they are plain objects, arrays\n * or buffers\n */\n\n\nfunction compareBy(object1, object2) {\n  if (isPlainObject(object1) && isPlainObject(object2)) {\n    return 'object';\n  }\n\n  if (Array.isArray(object1) && Array.isArray(object2)) {\n    return 'array';\n  }\n\n  if (Buffer.isBuffer(object1) && Buffer.isBuffer(object2)) {\n    return 'buffer';\n  } // All values are compared by identity unless they are both arrays, buffers or plain objects\n\n\n  return 'identity';\n}\n/**\n * Return true if the object has at least one property inherited or not\n * @param object The object to inspect\n * @return {boolean} If the object has any properties or not\n */\n\n\nfunction hasKeys(object) {\n  /* eslint-disable-next-line guard-for-in */\n  for (const prop in object) {\n    // Stop testing if the object has at least one property\n    return true;\n  }\n\n  return false;\n}\n/**\n * Compare two parsed uris checking if they are equivalent\n * @param {*} uri1 The source parsed uri\n * @param {*} uri2 The target parsed uri to compare\n * @return {boolean} Return true if both uris are equivalent\n */\n\n\nfunction compareUris(uri1, uri2) {\n  // Compare properties that are string values\n  const stringProps = ['scheme', 'username', 'password', 'database'];\n  const diff = stringProps.find(prop => uri1[prop] !== uri2[prop]);\n\n  if (diff) {\n    return false;\n  } // Compare query parameter values\n\n\n  if (!compare(uri1.options, uri2.options)) {\n    return false;\n  }\n\n  const hosts1 = uri1.hosts;\n  const hosts2 = uri2.hosts; // Check if both uris have the same number of hosts\n\n  if (hosts1.length !== hosts2.length) {\n    return false;\n  } // Check if every host in one array is present on the other array no matter where is positioned\n\n\n  for (const hostObject of hosts1) {\n    if (!hosts2.find(h => h.host === hostObject.host && h.port === hostObject.port)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Checks if an object is a mongoose instance, a connection or a mongo Db object\n * @param {*} object The object to check\n * @return {Db} The database object\n */\n\n\nfunction getDatabase(object) {\n  // If the object has a db property should be a mongoose connection instance\n  // Mongo 2 has a db property but its a function. See issue #14\n  if (object.db && typeof object.db !== 'function') {\n    return object.db;\n  } // If it has a connection property with a db property on it is a mongoose instance\n\n\n  if (object.connection && object.connection.db) {\n    return object.connection.db;\n  } // If none of the above are true it should be a mongo database object\n\n\n  return object;\n}\n\nmodule.exports = {\n  compare,\n  hasKeys,\n  compareArrays,\n  compareBy,\n  compareUris,\n  getDatabase\n};","map":{"version":3,"sources":["C:/Users/Yogesh/Desktop/musicplayer/musicapp/musicproject/src/api/node_modules/multer-gridfs-storage/lib/utils.js"],"names":["isPlainObject","require","compare","object1","object2","prop","comp","value1","value2","keys1","keys2","hasKeys","compareBy","compareArrays","Buffer","array1","array2","i","length","Array","isArray","isBuffer","object","compareUris","uri1","uri2","stringProps","diff","find","options","hosts1","hosts","hosts2","hostObject","h","host","port","getDatabase","db","connection","module","exports"],"mappings":"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","sourcesContent":["/**\n *\n * Utility functions\n * @module multer-gridfs-storage/utils\n *\n */\nconst isPlainObject = require('lodash.isplainobject');\n\n/**\n * Compare two objects by value.\n *\n * This function is designed taking into account how mongodb connection parsing routines work.\n * @param {any} object1 The target object to compare\n * @param {any} object2 The second object to compare with the first\n * @return {boolean} Return true if both objects are equal by value\n */\nfunction compare(object1, object2) {\n\tlet prop;\n\tlet comp;\n\tlet value1;\n\tlet value2;\n\tlet keys1 = 0;\n\tlet keys2 = 0;\n\n\t// If objects are equal by identity stop testing\n\tif (object1 === object2) {\n\t\treturn true;\n\t}\n\n\t// Falsey and plain objects with no properties are equivalent\n\tif (!object1 || !object2) {\n\t\tif (!object1 && !object2) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !(object1 ? hasKeys(object1) : hasKeys(object2));\n\t}\n\n\t// Check both own and inherited properties, MongoDb doesn't care where the property was defined\n\t/* eslint-disable-next-line guard-for-in */\n\tfor (prop in object1) {\n\t\tvalue1 = object1[prop];\n\t\tvalue2 = object2[prop];\n\t\t// If one object has one property not present in the other they are different\n\t\tif (prop in object2) {\n\t\t\tcomp = compareBy(value1, value2);\n\t\t\tswitch (comp) {\n\t\t\t\tcase 'object':\n\t\t\t\t\t// If both values are plain objects recursively compare its properties\n\t\t\t\t\tif (!compare(value1, value2)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'array':\n\t\t\t\t\t// If both values are arrays compare buffers and strings by content and every other value by identity\n\t\t\t\t\tif (!compareArrays(value1, value2)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\t// If both values are buffers compare them by content\n\t\t\t\t\tif (Buffer.compare(value1, value2) !== 0) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// All other values are compared by identity\n\t\t\t\t\tif (value1 !== value2) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tkeys1++;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Count all properties from the target object\n\t/* eslint-disable-next-line guard-for-in */\n\tfor (prop in object2) {\n\t\tkeys2++;\n\t}\n\n\t// If the target object has more properties than source they are different\n\treturn keys1 === keys2;\n}\n\n/**\n * Compare arrays by reference unless the values are strings or buffers\n * @param array1 The source array to compare\n * @param array2 The target array to compare with\n * @return {boolean} Returns true if both arrays are equivalent\n */\nfunction compareArrays(array1, array2) {\n\tlet value1;\n\tlet value2;\n\tlet i;\n\tif (array1.length !== array2.length) {\n\t\treturn false;\n\t}\n\n\tfor (i = 0; i < array1.length; i++) {\n\t\tvalue1 = array1[i];\n\t\tvalue2 = array2[i];\n\t\t// Types other than string or buffers are compared by reference because MongoDb only accepts those two types\n\t\t// for configuration inside arrays\n\t\tif (compareBy(value1, value2) === 'buffer') {\n\t\t\tif (Buffer.compare(value1, value2) !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (value1 !== value2) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Indicates how objects should be compared.\n * @param object1 The source object to compare\n * @param object2 The target object to compare with\n * @return {string} Always returns 'identity' unless both objects have the same type and they are plain objects, arrays\n * or buffers\n */\nfunction compareBy(object1, object2) {\n\tif (isPlainObject(object1) && isPlainObject(object2)) {\n\t\treturn 'object';\n\t}\n\n\tif (Array.isArray(object1) && Array.isArray(object2)) {\n\t\treturn 'array';\n\t}\n\n\tif (Buffer.isBuffer(object1) && Buffer.isBuffer(object2)) {\n\t\treturn 'buffer';\n\t}\n\n\t// All values are compared by identity unless they are both arrays, buffers or plain objects\n\treturn 'identity';\n}\n\n/**\n * Return true if the object has at least one property inherited or not\n * @param object The object to inspect\n * @return {boolean} If the object has any properties or not\n */\nfunction hasKeys(object) {\n\t/* eslint-disable-next-line guard-for-in */\n\tfor (const prop in object) {\n\t\t// Stop testing if the object has at least one property\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Compare two parsed uris checking if they are equivalent\n * @param {*} uri1 The source parsed uri\n * @param {*} uri2 The target parsed uri to compare\n * @return {boolean} Return true if both uris are equivalent\n */\nfunction compareUris(uri1, uri2) {\n\t// Compare properties that are string values\n\tconst stringProps = ['scheme', 'username', 'password', 'database'];\n\tconst diff = stringProps.find((prop) => uri1[prop] !== uri2[prop]);\n\tif (diff) {\n\t\treturn false;\n\t}\n\n\t// Compare query parameter values\n\tif (!compare(uri1.options, uri2.options)) {\n\t\treturn false;\n\t}\n\n\tconst hosts1 = uri1.hosts;\n\tconst hosts2 = uri2.hosts;\n\t// Check if both uris have the same number of hosts\n\tif (hosts1.length !== hosts2.length) {\n\t\treturn false;\n\t}\n\n\t// Check if every host in one array is present on the other array no matter where is positioned\n\tfor (const hostObject of hosts1) {\n\t\tif (\n\t\t\t!hosts2.find(\n\t\t\t\t(h) => h.host === hostObject.host && h.port === hostObject.port\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Checks if an object is a mongoose instance, a connection or a mongo Db object\n * @param {*} object The object to check\n * @return {Db} The database object\n */\nfunction getDatabase(object) {\n\t// If the object has a db property should be a mongoose connection instance\n\t// Mongo 2 has a db property but its a function. See issue #14\n\tif (object.db && typeof object.db !== 'function') {\n\t\treturn object.db;\n\t}\n\n\t// If it has a connection property with a db property on it is a mongoose instance\n\tif (object.connection && object.connection.db) {\n\t\treturn object.connection.db;\n\t}\n\n\t// If none of the above are true it should be a mongo database object\n\treturn object;\n}\n\nmodule.exports = {\n\tcompare,\n\thasKeys,\n\tcompareArrays,\n\tcompareBy,\n\tcompareUris,\n\tgetDatabase\n};\n"]},"metadata":{},"sourceType":"module"}