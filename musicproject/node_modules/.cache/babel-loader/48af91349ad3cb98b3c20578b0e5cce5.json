{"ast":null,"code":"/*\n * FlushWritable\n * Copyright 2014 Tom Frost\n */\nvar EventEmitter = require('events').EventEmitter,\n    Writable = require('stream').Writable,\n    util = require('util');\n/**\n * FlushWritable is a drop-in replacement for stream.Writable that implements\n * the Transform stream's _flush() method.  FlushWritable is meant to be\n * extended, just like stream.Writable.  However, in the child class's\n * prototype, a method called _flush(cb) can be defined that will halt the\n * firing of the 'finish' event until the callback is called.  If the callback\n * if called with a truthy first argument, 'error' is emitted instead.\n * @param {Object} [opts] Options to configure this Writable stream.  See the\n *      Node.js docs for stream.Writable.\n * @constructor\n */\n\n\nfunction FlushWritable(opts) {\n  Writable.call(this, opts);\n}\n\n_c = FlushWritable;\nutil.inherits(FlushWritable, Writable);\n\nFlushWritable.prototype.emit = function (evt) {\n  if (evt === 'finish' && this._flush && !Writable.prototype._flush) {\n    this._flush(function (err) {\n      if (err) EventEmitter.prototype.emit.call(this, 'error', err);else EventEmitter.prototype.emit.call(this, 'finish');\n    }.bind(this));\n  } else {\n    var args = Array.prototype.slice.call(arguments);\n    EventEmitter.prototype.emit.apply(this, args);\n  }\n};\n\nmodule.exports = FlushWritable;\n\nvar _c;\n\n$RefreshReg$(_c, \"FlushWritable\");","map":{"version":3,"sources":["C:/Users/Yogesh/Desktop/musicplayer/musicapp/musicproject/src/api/node_modules/flushwritable/lib/FlushWritable.js"],"names":["EventEmitter","require","Writable","util","FlushWritable","opts","call","inherits","prototype","emit","evt","_flush","err","bind","args","Array","slice","arguments","apply","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAArC;AAAA,IACCE,QAAQ,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,QAD9B;AAAA,IAECC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAFf;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,aAAT,CAAuBC,IAAvB,EAA6B;AAC5BH,EAAAA,QAAQ,CAACI,IAAT,CAAc,IAAd,EAAoBD,IAApB;AACA;;KAFQD,a;AAGTD,IAAI,CAACI,QAAL,CAAcH,aAAd,EAA6BF,QAA7B;;AAEAE,aAAa,CAACI,SAAd,CAAwBC,IAAxB,GAA+B,UAASC,GAAT,EAAc;AAC5C,MAAIA,GAAG,KAAK,QAAR,IAAoB,KAAKC,MAAzB,IAAmC,CAACT,QAAQ,CAACM,SAAT,CAAmBG,MAA3D,EAAmE;AAClE,SAAKA,MAAL,CAAY,UAASC,GAAT,EAAc;AACzB,UAAIA,GAAJ,EACCZ,YAAY,CAACQ,SAAb,CAAuBC,IAAvB,CAA4BH,IAA5B,CAAiC,IAAjC,EAAuC,OAAvC,EAAgDM,GAAhD,EADD,KAGCZ,YAAY,CAACQ,SAAb,CAAuBC,IAAvB,CAA4BH,IAA5B,CAAiC,IAAjC,EAAuC,QAAvC;AACD,KALW,CAKVO,IALU,CAKL,IALK,CAAZ;AAMA,GAPD,MAQK;AACJ,QAAIC,IAAI,GAAGC,KAAK,CAACP,SAAN,CAAgBQ,KAAhB,CAAsBV,IAAtB,CAA2BW,SAA3B,CAAX;AACAjB,IAAAA,YAAY,CAACQ,SAAb,CAAuBC,IAAvB,CAA4BS,KAA5B,CAAkC,IAAlC,EAAwCJ,IAAxC;AACA;AACD,CAbD;;AAeAK,MAAM,CAACC,OAAP,GAAiBhB,aAAjB","sourcesContent":["/*\n * FlushWritable\n * Copyright 2014 Tom Frost\n */\n\nvar EventEmitter = require('events').EventEmitter,\n\tWritable = require('stream').Writable,\n\tutil = require('util');\n\n/**\n * FlushWritable is a drop-in replacement for stream.Writable that implements\n * the Transform stream's _flush() method.  FlushWritable is meant to be\n * extended, just like stream.Writable.  However, in the child class's\n * prototype, a method called _flush(cb) can be defined that will halt the\n * firing of the 'finish' event until the callback is called.  If the callback\n * if called with a truthy first argument, 'error' is emitted instead.\n * @param {Object} [opts] Options to configure this Writable stream.  See the\n *      Node.js docs for stream.Writable.\n * @constructor\n */\nfunction FlushWritable(opts) {\n\tWritable.call(this, opts);\n}\nutil.inherits(FlushWritable, Writable);\n\nFlushWritable.prototype.emit = function(evt) {\n\tif (evt === 'finish' && this._flush && !Writable.prototype._flush) {\n\t\tthis._flush(function(err) {\n\t\t\tif (err)\n\t\t\t\tEventEmitter.prototype.emit.call(this, 'error', err);\n\t\t\telse\n\t\t\t\tEventEmitter.prototype.emit.call(this, 'finish');\n\t\t}.bind(this));\n\t}\n\telse {\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\tEventEmitter.prototype.emit.apply(this, args);\n\t}\n};\n\nmodule.exports = FlushWritable;\n"]},"metadata":{},"sourceType":"module"}