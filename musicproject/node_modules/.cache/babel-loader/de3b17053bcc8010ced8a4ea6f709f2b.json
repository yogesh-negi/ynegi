{"ast":null,"code":"/*!\r\n * cookie-parser\r\n * Copyright(c) 2014 TJ Holowaychuk\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar cookie = require('cookie');\n\nvar signature = require('cookie-signature');\n/**\r\n * Module exports.\r\n * @public\r\n */\n\n\nmodule.exports = cookieParser;\nmodule.exports.JSONCookie = JSONCookie;\nmodule.exports.JSONCookies = JSONCookies;\nmodule.exports.signedCookie = signedCookie;\nmodule.exports.signedCookies = signedCookies;\n/**\r\n * Parse Cookie header and populate `req.cookies`\r\n * with an object keyed by the cookie names.\r\n *\r\n * @param {string|array} [secret] A string (or array of strings) representing cookie signing secret(s).\r\n * @param {Object} [options]\r\n * @return {Function}\r\n * @public\r\n */\n\nfunction cookieParser(secret, options) {\n  var secrets = !secret || Array.isArray(secret) ? secret || [] : [secret];\n  return function cookieParser(req, res, next) {\n    if (req.cookies) {\n      return next();\n    }\n\n    var cookies = req.headers.cookie;\n    req.secret = secrets[0];\n    req.cookies = Object.create(null);\n    req.signedCookies = Object.create(null); // no cookies\n\n    if (!cookies) {\n      return next();\n    }\n\n    req.cookies = cookie.parse(cookies, options); // parse signed cookies\n\n    if (secrets.length !== 0) {\n      req.signedCookies = signedCookies(req.cookies, secrets);\n      req.signedCookies = JSONCookies(req.signedCookies);\n    } // parse JSON cookies\n\n\n    req.cookies = JSONCookies(req.cookies);\n    next();\n  };\n}\n/**\r\n * Parse JSON cookie string.\r\n *\r\n * @param {String} str\r\n * @return {Object} Parsed object or undefined if not json cookie\r\n * @public\r\n */\n\n\nfunction JSONCookie(str) {\n  if (typeof str !== 'string' || str.substr(0, 2) !== 'j:') {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(str.slice(2));\n  } catch (err) {\n    return undefined;\n  }\n}\n/**\r\n * Parse JSON cookies.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @public\r\n */\n\n\n_c = JSONCookie;\n\nfunction JSONCookies(obj) {\n  var cookies = Object.keys(obj);\n  var key;\n  var val;\n\n  for (var i = 0; i < cookies.length; i++) {\n    key = cookies[i];\n    val = JSONCookie(obj[key]);\n\n    if (val) {\n      obj[key] = val;\n    }\n  }\n\n  return obj;\n}\n/**\r\n * Parse a signed cookie string, return the decoded value.\r\n *\r\n * @param {String} str signed cookie string\r\n * @param {string|array} secret\r\n * @return {String} decoded value\r\n * @public\r\n */\n\n\n_c2 = JSONCookies;\n\nfunction signedCookie(str, secret) {\n  if (typeof str !== 'string') {\n    return undefined;\n  }\n\n  if (str.substr(0, 2) !== 's:') {\n    return str;\n  }\n\n  var secrets = !secret || Array.isArray(secret) ? secret || [] : [secret];\n\n  for (var i = 0; i < secrets.length; i++) {\n    var val = signature.unsign(str.slice(2), secrets[i]);\n\n    if (val !== false) {\n      return val;\n    }\n  }\n\n  return false;\n}\n/**\r\n * Parse signed cookies, returning an object containing the decoded key/value\r\n * pairs, while removing the signed key from obj.\r\n *\r\n * @param {Object} obj\r\n * @param {string|array} secret\r\n * @return {Object}\r\n * @public\r\n */\n\n\nfunction signedCookies(obj, secret) {\n  var cookies = Object.keys(obj);\n  var dec;\n  var key;\n  var ret = Object.create(null);\n  var val;\n\n  for (var i = 0; i < cookies.length; i++) {\n    key = cookies[i];\n    val = obj[key];\n    dec = signedCookie(val, secret);\n\n    if (val !== dec) {\n      ret[key] = dec;\n      delete obj[key];\n    }\n  }\n\n  return ret;\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"JSONCookie\");\n$RefreshReg$(_c2, \"JSONCookies\");","map":{"version":3,"sources":["C:/Users/Yogesh/Desktop/musicplayer/musicapp/musicproject/src/api/node_modules/cookie-parser/index.js"],"names":["cookie","require","signature","module","exports","cookieParser","JSONCookie","JSONCookies","signedCookie","signedCookies","secret","options","secrets","Array","isArray","req","res","next","cookies","headers","Object","create","parse","length","str","substr","undefined","JSON","slice","err","obj","keys","key","val","i","unsign","dec","ret"],"mappings":"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","sourcesContent":["/*!\r\n * cookie-parser\r\n * Copyright(c) 2014 TJ Holowaychuk\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar cookie = require('cookie')\r\nvar signature = require('cookie-signature')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = cookieParser\r\nmodule.exports.JSONCookie = JSONCookie\r\nmodule.exports.JSONCookies = JSONCookies\r\nmodule.exports.signedCookie = signedCookie\r\nmodule.exports.signedCookies = signedCookies\r\n\r\n/**\r\n * Parse Cookie header and populate `req.cookies`\r\n * with an object keyed by the cookie names.\r\n *\r\n * @param {string|array} [secret] A string (or array of strings) representing cookie signing secret(s).\r\n * @param {Object} [options]\r\n * @return {Function}\r\n * @public\r\n */\r\n\r\nfunction cookieParser (secret, options) {\r\n  var secrets = !secret || Array.isArray(secret)\r\n    ? (secret || [])\r\n    : [secret]\r\n\r\n  return function cookieParser (req, res, next) {\r\n    if (req.cookies) {\r\n      return next()\r\n    }\r\n\r\n    var cookies = req.headers.cookie\r\n\r\n    req.secret = secrets[0]\r\n    req.cookies = Object.create(null)\r\n    req.signedCookies = Object.create(null)\r\n\r\n    // no cookies\r\n    if (!cookies) {\r\n      return next()\r\n    }\r\n\r\n    req.cookies = cookie.parse(cookies, options)\r\n\r\n    // parse signed cookies\r\n    if (secrets.length !== 0) {\r\n      req.signedCookies = signedCookies(req.cookies, secrets)\r\n      req.signedCookies = JSONCookies(req.signedCookies)\r\n    }\r\n\r\n    // parse JSON cookies\r\n    req.cookies = JSONCookies(req.cookies)\r\n\r\n    next()\r\n  }\r\n}\r\n\r\n/**\r\n * Parse JSON cookie string.\r\n *\r\n * @param {String} str\r\n * @return {Object} Parsed object or undefined if not json cookie\r\n * @public\r\n */\r\n\r\nfunction JSONCookie (str) {\r\n  if (typeof str !== 'string' || str.substr(0, 2) !== 'j:') {\r\n    return undefined\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(str.slice(2))\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Parse JSON cookies.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction JSONCookies (obj) {\r\n  var cookies = Object.keys(obj)\r\n  var key\r\n  var val\r\n\r\n  for (var i = 0; i < cookies.length; i++) {\r\n    key = cookies[i]\r\n    val = JSONCookie(obj[key])\r\n\r\n    if (val) {\r\n      obj[key] = val\r\n    }\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n/**\r\n * Parse a signed cookie string, return the decoded value.\r\n *\r\n * @param {String} str signed cookie string\r\n * @param {string|array} secret\r\n * @return {String} decoded value\r\n * @public\r\n */\r\n\r\nfunction signedCookie (str, secret) {\r\n  if (typeof str !== 'string') {\r\n    return undefined\r\n  }\r\n\r\n  if (str.substr(0, 2) !== 's:') {\r\n    return str\r\n  }\r\n\r\n  var secrets = !secret || Array.isArray(secret)\r\n    ? (secret || [])\r\n    : [secret]\r\n\r\n  for (var i = 0; i < secrets.length; i++) {\r\n    var val = signature.unsign(str.slice(2), secrets[i])\r\n\r\n    if (val !== false) {\r\n      return val\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Parse signed cookies, returning an object containing the decoded key/value\r\n * pairs, while removing the signed key from obj.\r\n *\r\n * @param {Object} obj\r\n * @param {string|array} secret\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction signedCookies (obj, secret) {\r\n  var cookies = Object.keys(obj)\r\n  var dec\r\n  var key\r\n  var ret = Object.create(null)\r\n  var val\r\n\r\n  for (var i = 0; i < cookies.length; i++) {\r\n    key = cookies[i]\r\n    val = obj[key]\r\n    dec = signedCookie(val, secret)\r\n\r\n    if (val !== dec) {\r\n      ret[key] = dec\r\n      delete obj[key]\r\n    }\r\n  }\r\n\r\n  return ret\r\n}\r\n"]},"metadata":{},"sourceType":"module"}