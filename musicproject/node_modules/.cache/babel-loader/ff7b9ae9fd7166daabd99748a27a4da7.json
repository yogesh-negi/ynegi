{"ast":null,"code":"/*!\r\n * on-headers\r\n * Copyright(c) 2014 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = onHeaders;\n/**\r\n * Create a replacement writeHead method.\r\n *\r\n * @param {function} prevWriteHead\r\n * @param {function} listener\r\n * @private\r\n */\n\nfunction createWriteHead(prevWriteHead, listener) {\n  var fired = false; // return function with core name and argument list\n\n  return function writeHead(statusCode) {\n    // set headers from arguments\n    var args = setWriteHeadHeaders.apply(this, arguments); // fire listener\n\n    if (!fired) {\n      fired = true;\n      listener.call(this); // pass-along an updated status code\n\n      if (typeof args[0] === 'number' && this.statusCode !== args[0]) {\n        args[0] = this.statusCode;\n        args.length = 1;\n      }\n    }\n\n    return prevWriteHead.apply(this, args);\n  };\n}\n/**\r\n * Execute a listener when a response is about to write headers.\r\n *\r\n * @param {object} res\r\n * @return {function} listener\r\n * @public\r\n */\n\n\nfunction onHeaders(res, listener) {\n  if (!res) {\n    throw new TypeError('argument res is required');\n  }\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('argument listener must be a function');\n  }\n\n  res.writeHead = createWriteHead(res.writeHead, listener);\n}\n/**\r\n * Set headers contained in array on the response object.\r\n *\r\n * @param {object} res\r\n * @param {array} headers\r\n * @private\r\n */\n\n\nfunction setHeadersFromArray(res, headers) {\n  for (var i = 0; i < headers.length; i++) {\n    res.setHeader(headers[i][0], headers[i][1]);\n  }\n}\n/**\r\n * Set headers contained in object on the response object.\r\n *\r\n * @param {object} res\r\n * @param {object} headers\r\n * @private\r\n */\n\n\nfunction setHeadersFromObject(res, headers) {\n  var keys = Object.keys(headers);\n\n  for (var i = 0; i < keys.length; i++) {\n    var k = keys[i];\n    if (k) res.setHeader(k, headers[k]);\n  }\n}\n/**\r\n * Set headers and other properties on the response object.\r\n *\r\n * @param {number} statusCode\r\n * @private\r\n */\n\n\nfunction setWriteHeadHeaders(statusCode) {\n  var length = arguments.length;\n  var headerIndex = length > 1 && typeof arguments[1] === 'string' ? 2 : 1;\n  var headers = length >= headerIndex + 1 ? arguments[headerIndex] : undefined;\n  this.statusCode = statusCode;\n\n  if (Array.isArray(headers)) {\n    // handle array case\n    setHeadersFromArray(this, headers);\n  } else if (headers) {\n    // handle object case\n    setHeadersFromObject(this, headers);\n  } // copy leading arguments\n\n\n  var args = new Array(Math.min(length, headerIndex));\n\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i];\n  }\n\n  return args;\n}","map":{"version":3,"sources":["C:/Users/Yogesh/Desktop/musicplayer/musicapp/musicproject/src/api/node_modules/on-headers/index.js"],"names":["module","exports","onHeaders","createWriteHead","prevWriteHead","listener","fired","writeHead","statusCode","args","setWriteHeadHeaders","apply","arguments","call","length","res","TypeError","setHeadersFromArray","headers","i","setHeader","setHeadersFromObject","keys","Object","k","headerIndex","undefined","Array","isArray","Math","min"],"mappings":"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","sourcesContent":["/*!\r\n * on-headers\r\n * Copyright(c) 2014 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = onHeaders\r\n\r\n/**\r\n * Create a replacement writeHead method.\r\n *\r\n * @param {function} prevWriteHead\r\n * @param {function} listener\r\n * @private\r\n */\r\n\r\nfunction createWriteHead (prevWriteHead, listener) {\r\n  var fired = false\r\n\r\n  // return function with core name and argument list\r\n  return function writeHead (statusCode) {\r\n    // set headers from arguments\r\n    var args = setWriteHeadHeaders.apply(this, arguments)\r\n\r\n    // fire listener\r\n    if (!fired) {\r\n      fired = true\r\n      listener.call(this)\r\n\r\n      // pass-along an updated status code\r\n      if (typeof args[0] === 'number' && this.statusCode !== args[0]) {\r\n        args[0] = this.statusCode\r\n        args.length = 1\r\n      }\r\n    }\r\n\r\n    return prevWriteHead.apply(this, args)\r\n  }\r\n}\r\n\r\n/**\r\n * Execute a listener when a response is about to write headers.\r\n *\r\n * @param {object} res\r\n * @return {function} listener\r\n * @public\r\n */\r\n\r\nfunction onHeaders (res, listener) {\r\n  if (!res) {\r\n    throw new TypeError('argument res is required')\r\n  }\r\n\r\n  if (typeof listener !== 'function') {\r\n    throw new TypeError('argument listener must be a function')\r\n  }\r\n\r\n  res.writeHead = createWriteHead(res.writeHead, listener)\r\n}\r\n\r\n/**\r\n * Set headers contained in array on the response object.\r\n *\r\n * @param {object} res\r\n * @param {array} headers\r\n * @private\r\n */\r\n\r\nfunction setHeadersFromArray (res, headers) {\r\n  for (var i = 0; i < headers.length; i++) {\r\n    res.setHeader(headers[i][0], headers[i][1])\r\n  }\r\n}\r\n\r\n/**\r\n * Set headers contained in object on the response object.\r\n *\r\n * @param {object} res\r\n * @param {object} headers\r\n * @private\r\n */\r\n\r\nfunction setHeadersFromObject (res, headers) {\r\n  var keys = Object.keys(headers)\r\n  for (var i = 0; i < keys.length; i++) {\r\n    var k = keys[i]\r\n    if (k) res.setHeader(k, headers[k])\r\n  }\r\n}\r\n\r\n/**\r\n * Set headers and other properties on the response object.\r\n *\r\n * @param {number} statusCode\r\n * @private\r\n */\r\n\r\nfunction setWriteHeadHeaders (statusCode) {\r\n  var length = arguments.length\r\n  var headerIndex = length > 1 && typeof arguments[1] === 'string'\r\n    ? 2\r\n    : 1\r\n\r\n  var headers = length >= headerIndex + 1\r\n    ? arguments[headerIndex]\r\n    : undefined\r\n\r\n  this.statusCode = statusCode\r\n\r\n  if (Array.isArray(headers)) {\r\n    // handle array case\r\n    setHeadersFromArray(this, headers)\r\n  } else if (headers) {\r\n    // handle object case\r\n    setHeadersFromObject(this, headers)\r\n  }\r\n\r\n  // copy leading arguments\r\n  var args = new Array(Math.min(length, headerIndex))\r\n  for (var i = 0; i < args.length; i++) {\r\n    args[i] = arguments[i]\r\n  }\r\n\r\n  return args\r\n}\r\n"]},"metadata":{},"sourceType":"module"}